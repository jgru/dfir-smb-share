* dfir-smb-share
A Docker-based SMB Share for DFIR work. Attention: WIP!

** Description
This repo provides a dockerized SMB-Share, which hashes incoming files automatically and timestamps them securely by utilizing a TSA.
For this purpose, three services - DHCPD, SMBD and a service for monitoring the file system - were orchestrated, which, when used together, enable the quick and isolated release of a folder of the examination system as an SMB share with a minimal footprint. In order not to have to carry out any configuration, a DHCP server is started on the specified network interface of the examination system, the actual SMB daemon provides a folder in which the toolkit is then to be copied. In the third Docker container is a Monitoring implemented on the basis of inotifywait, which monitors changes to files and their metadata. This monitors the folder shared as a network drive using inotifywait and creates a SHA-256 checksum immediately after the creation of a new file has been completed. In this way, the integrity of all artifacts collected from the examination object is automatically ensured. In order to bind the time to the artifact in addition to the integrity, a time stamping according to RFC-3161 is carried out, as suggested by Bruce Nikkel in 2016. With the help of openssl and curl, a from a previously generated hash in the form of a timestamping request is transmitted to the timestamping authority (TSA), which concatenates the current time stamp with the transmitted hash, hashes the result and with the private key of the TSA signed.1} This proves that the analysis result existed in the unchanged form at that time.

Thus, the simple command docker-compose up can start the DFIR-SMB share, after which the integrity for all newly created files is automatically documented in the specified directory and made available as a network drive and the respective file is given a cryptographic time stamp. Using inotifywait, a copy is also created in a directory to be specified on the examination system for immediate further examination, which takes place on a duplicate.

** Usage

*** Prerequisites
Please note that you need a working Docker container runtime and the utility [[https://github.com/docker/compose][docker-compose]]. Furthermore, Docker's [[https://docs.docker.com/network/network-tutorial-host/][host network permissions]] need to be available on the platform.

*** Usage
In order to use the setup, the following modifications will be needed:
- Modify the [[file:.env][.env]]-file to...
  - Adapt the file paths to your host's environment
  - Set the right interface (e.g. an Host-only networking interface of VirtualBox for trying the setup)
- If you need to change the interface name, then you have to change the file [[file:dhcpd-docker/data/dhcpd.conf][dhcpd.conf]] as well.
  - Ensure that all occurences of the NIC's name in that file are replaced with the new one
  - Modify the IP-addresses and address ranges to match the NIC's configuration
  - The NIC has to be configured appropriately (Modify it with =ip addr add ...= beforehand)

After those modifications start the containers via:
#+begin_src shell
docker-compose up
#+end_src

If everything is working, you should see the following output:
#+begin_example
Starting dfir-smb-share_dhcp_1     ... done
Starting dfir-smb-share_smb_1      ... done
Starting dfir-smb-share_observer_1 ... done
Attaching to dfir-smb-share_dhcp_1, dfir-smb-share_observer_1, dfir-smb-share_smb_1
dhcp_1      | usermod: no changes
dhcp_1      | You must add the 'docker run' option '--net=host' if you want to provide DHCP service to the host network.
observer_1  | Setting up watches.  Beware: since -r was given, this may take a while!
dhcp_1      | Internet Systems Consortium DHCP Server 4.4.1
dhcp_1      | Copyright 2004-2018 Internet Systems Consortium.
dhcp_1      | All rights reserved.
dhcp_1      | For info, please visit https://www.isc.org/software/dhcp/
observer_1  | Watches established.
dhcp_1      | Config file: /data/dhcpd.conf
dhcp_1      | Database file: /data/dhcpd.leases
dhcp_1      | PID file: /var/run/dhcpd.pid
dhcp_1      | Wrote 0 leases to leases file.
dhcp_1      | Listening on LPF/vboxnet0/0a:00:27:00:00:00/192.168.56.0/24
dhcp_1      | Sending on   LPF/vboxnet0/0a:00:27:00:00:00/192.168.56.0/24
dhcp_1      | Sending on   Socket/fallback/fallback-net
dhcp_1      | Server starting service.
smb_1       | Starting SMB/CIFS daemon: smbd.
smb_1       | [2022/05/28 06:51:02.373389,  0] ../lib/util/become_daemon.c:138(daemon_ready)
smb_1       |   daemon_ready: STATUS=daemon 'smbd' finished starting up and ready to serve connections
smb_1       | [2022/05/28 07:01:40.688163,  0] ../lib/util/become_daemon.c:138(daemon_ready)
smb_1       |   daemon_ready: STATUS=daemon 'smbd' finished starting up and ready to serve connections
#+end_example

(Since =network_mode: host= is specified in [[file:docker-compose.yml][docker-compose.yml]] you can ignote the warning regarding ='--net=host'=.)

*** Checking the TSR
#+begin_src sh
openssl ts -query -data hash.log -cert | curl -s -H "Content-Type: application/timestamp-query" --data-binary @- 'https://zeitstempel.dfn.de/' > hash.log.tsr
openssl ts -reply -in hash.log.tsr -text
openssl ts -verify -in hash.log.tsr -data hash.log -CAfile './keys/dfn-ca-chain.pem '
#+end_src

See: https://www.digistamp.com/technical/software-alternatives/using-openssl-to-request-timestamps
